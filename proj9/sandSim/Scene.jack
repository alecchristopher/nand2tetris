class Scene {
	field Array2D canvas;
	field int scaled_cols;
	field int scaled_rows;
	field int screen_cols;
	field int screen_rows;
	field int cell_size;
	
	field Controller cursor;
	field int direction;
	
	constructor Scene new(){
		let cell_size = 4;
		let screen_cols = 256;
		let screen_rows = 512;
		let scaled_cols = screen_cols / cell_size; //64
		let scaled_rows = screen_rows / cell_size; //128
		let canvas = Array2D.new(scaled_cols, scaled_rows);
		// max := canvas.set ( 62, 126)
		do canvas.set(0, 0, 1); // top left
		//do canvas.set(0, 126, 1); // top right
		//do canvas.set(62, 0, 1); // bottom left
		//do canvas.set(62, 126, 1); // bottom right
		let cursor = Controller.new();
		

		return this;
	}
	
	method void dispose() {
		do Memory.deAlloc(this);
		do canvas.dispose();
		do cursor.dispose();
		return;
	}
	
	method void run() {
		var char key;  // the key currently pressed by the user
		var boolean exit;
		let exit = false;
		
		while (~exit) {
			do Screen.clearScreen();
			let key = Keyboard.keyPressed();
			if( key = 0 ) { let direction = 0; }    // stay still
			if (key = 81)  { let exit = true; }     // q key
			if (key = 130) { let direction = 3; }   // left arrow
			if (key = 132) { let direction = 4; }   // right arrow
			do move_square();
			do drop_at_cursor();
			do draw();
			do physics();

		} // while
		return;
	}
	
	
	method void move_square() {
		if (direction = 0) { return; }
		if (direction = 3) { do cursor.move_left(); }
		if (direction = 4) { do cursor.move_right(); }
		return;
	}
   
	method void drop_at_cursor(){
		var int x, y;
		let x = cursor.x();
		let y = cursor.y();
		do canvas.set(x, y, 1);
		return;
	}
	
	method void draw() {
		var int row, col, counter, cell;
		var int xpos, ypos;
		var int size;
		let size = scaled_cols * scaled_rows;
		let counter = 0;
		while (counter < (size)){
			let cell = canvas.get_direct(counter);
			if( cell = 1 ) {
				do Screen.setColor(true);
				let row = counter / scaled_cols;
				let col = counter - (row * scaled_cols);
				let xpos = row * cell_size;
				let ypos = col * cell_size;
				do Screen.drawRectangle(xpos, ypos, xpos + cell_size, ypos + cell_size);
			}
			let counter = counter + 1;
		}
		return;
	}
	
	method void physics() {
		var int row, col, counter, cell;
		var int xpos, ypos;
		var int size;
		var int l, b, r;
		let size = scaled_cols * scaled_rows;
		let counter = size;
		while (counter > -1){
			let cell = canvas.get_direct(counter);
			if( cell = 1 ) {
				let row = counter / scaled_cols;
				let col = counter - (row * scaled_cols);
				if (col + 2< scaled_cols){
					let b = canvas.get(col + 1, row);
					if( b = 0 ) {
						do canvas.set(col, row, 0);
						do canvas.set(col + 1, row, 1);
					}
					else {
						if (row > 0){
							let l = canvas.get(col + 1, row -1);
							if( l = 0) {
								do canvas.set(col, row, 0);
								do canvas.set(col + 1, row - 1, 1);
							}
							else {
								let r = canvas.get(col + 1, row + 1);
								if( r = 0) {
									do canvas.set(col, row, 0);
									do canvas.set(col + 1, row + 1, 1);
								}
							}
						}
						else{
							if ( row < scaled_rows - 2){
								let r = canvas.get(col + 1, row + 1);
								if( r = 0) {
									do canvas.set(col, row, 0);
									do canvas.set(col + 1, row + 1, 1);
								}
							}
						}
						
					
					}
				}
			}
			let counter = counter - 1;
		}
		return;
	}
	
	

}